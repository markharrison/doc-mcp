"use strict";(self.webpackChunkdoc_mcp=self.webpackChunkdoc_mcp||[]).push([[139],{69:(e,o,n)=>{n.d(o,{A:()=>s});const s=n.p+"assets/images/test2-f203958b6fc7b434b8374096d900cd14.png"},7646:(e,o,n)=>{n.d(o,{A:()=>s});const s=n.p+"assets/images/test1-0b140fc068dffe905aa711918fe07786.png"},8413:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"mcp-development","title":"MCP Development","description":"In this section we shall discuss creating an MCP Server - specifically, the Colour MCP server that was covered in the previous section, and used in the demo.","source":"@site/docs/06-mcp-development.md","sourceDirName":".","slug":"/mcp-development","permalink":"/doc-mcp/mcp-development","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_label":"MCP Development","slug":"/mcp-development"},"sidebar":"tutorialSidebar","previous":{"title":"Demo with GH Coding Agent","permalink":"/doc-mcp/mcp-demo-ghca"},"next":{"title":"MCP AuthN/AuthZ","permalink":"/doc-mcp/mcp-auth"}}');var t=n(4848),r=n(8453);const i={sidebar_label:"MCP Development",slug:"/mcp-development"},l="MCP Development",c={},a=[{value:"MCP SDK",id:"mcp-sdk",level:2},{value:"Colors MCP",id:"colors-mcp",level:2},{value:"ColorsMCP-http",id:"colorsmcp-http",level:3},{value:"ColorsCommonMCP",id:"colorscommonmcp",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Test",id:"test",level:2}];function h(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"mcp-development",children:"MCP Development"})}),"\n",(0,t.jsx)(o.p,{children:"In this section we shall discuss creating an MCP Server - specifically, the Colour MCP server that was covered in the previous section, and used in the demo."}),"\n",(0,t.jsx)(o.h2,{id:"mcp-sdk",children:"MCP SDK"}),"\n",(0,t.jsx)(o.p,{children:"To help build MCP servers with minimal effort - there are Software Development Kits (SDKS) for the following languages:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"C#"}),"\n",(0,t.jsx)(o.li,{children:"Java"}),"\n",(0,t.jsx)(o.li,{children:"Kotlin"}),"\n",(0,t.jsx)(o.li,{children:"Python"}),"\n",(0,t.jsx)(o.li,{children:"Ruby"}),"\n",(0,t.jsx)(o.li,{children:"Swift"}),"\n",(0,t.jsx)(o.li,{children:"TypeScript"}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Links to the different SDKS are at ",(0,t.jsx)(o.a,{href:"https://modelcontextprotocol.io/",children:"https://modelcontextprotocol.io/"})]}),"\n",(0,t.jsx)(o.h2,{id:"colors-mcp",children:"Colors MCP"}),"\n",(0,t.jsxs)(o.p,{children:["The source code to the Colors MCP server is at : ",(0,t.jsx)(o.a,{href:"https://github.com/markharrison/ColorsMCP",children:"https://github.com/markharrison/ColorsMCP"})]}),"\n",(0,t.jsx)(o.p,{children:"It could be used as the basis of your own MCP Server - for knowledge that you want to make available to your AI applications.  So take a copy:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-powershell",children:"git clone https://github.com/markharrison/ColorsMCP \n"})}),"\n",(0,t.jsx)(o.p,{children:"There are several projects in the solution:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"ColorsMCP ... this uses the STDIO transport protocol"}),"\n",(0,t.jsx)(o.li,{children:"ColorsMCP-HTTP ... this uses the HTTP Streamable transport protocol"}),"\n",(0,t.jsx)(o.li,{children:"ColorsCommonMCP ... this is common code used by both the ColorMCP and ColorsMCP-http projects"}),"\n",(0,t.jsx)(o.li,{children:"MCPClient ... this is a simple client project to test calling the MCP servers"}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"The code is simple - thanks to the C# SDK, which does the bulk of the work."}),"\n",(0,t.jsx)(o.h3,{id:"colorsmcp-http",children:"ColorsMCP-http"}),"\n",(0,t.jsxs)(o.p,{children:["Check ",(0,t.jsx)(o.code,{children:"program.cs"})," to see how the server application is instantiated with MCP support."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-C#",children:'            var builder = WebApplication.CreateBuilder(args);\n            builder.Services\n                .AddMcpServer()\n                .WithHttpTransport()\n                .WithTools<ColorsTools>();\n\n            builder.Services.AddCors(options =>\n            {\n                options.AddDefaultPolicy(policy =>\n                {\n                    policy.AllowAnyOrigin()\n                          .AllowAnyHeader()\n                          .AllowAnyMethod();\n                });\n            });\n\n            builder.Services.AddSingleton<ColorsService>();\n\n            var app = builder.Build();\n\n            var colorsService = app.Services.GetRequiredService<ColorsService>(); \n\n            app.UseCors();\n\n            app.MapMcp();\n\n            app.MapGet("/health", () => "Healthy");\n\n            app.Run();\n'})}),"\n",(0,t.jsxs)(o.p,{children:["We can see that the startup logic ",(0,t.jsx)(o.code,{children:".WithTools"})," refers to a class called ",(0,t.jsx)(o.code,{children:"ColorsTools"})," - this is what contains our MCP Tools.  We shall look at this in detail shortly."]}),"\n",(0,t.jsx)(o.h3,{id:"colorscommonmcp",children:"ColorsCommonMCP"}),"\n",(0,t.jsx)(o.p,{children:"The project contains our common code - that is used by the projects to support different transport protocols."}),"\n",(0,t.jsx)(o.p,{children:"The Colors knowledge is hard coded in a JSON file.  But other such servers might access information in databases or call APIs."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-JSON",children:'[\n  {\n    "name": "ALICEBLUE",\n    "hexcode": "#F0F8FF",\n    "rgb": "RGB(240, 248, 255)",\n    "families": [ "white" ]\n  },\n  {\n    "name": "ANTIQUEWHITE",\n    "hexcode": "#FAEBD7",\n    "rgb": "RGB(250, 235, 215)",\n    "families": [ "white", "tan" ]\n  },\n  {\n    "name": "AQUA",\n    "hexcode": "#00FFFF",\n    "rgb": "RGB(0, 255, 255)",\n    "families": [ "blue", "aqua" ]\n  },\n\n  etc \n\n}\n'})}),"\n",(0,t.jsxs)(o.p,{children:["The three MCP Tools are located in ",(0,t.jsx)(o.code,{children:"ColorsTools.cs"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-C#",children:"\nusing ModelContextProtocol.Server;\nusing System.ComponentModel;\nusing System.Text.Json;\n\nnamespace ColorsCommonMCP;\n\n[McpServerToolType]\npublic sealed class ColorsTools\n{\n    private readonly ColorsService colorsService;\n\n    public ColorsTools(ColorsService colorsService)\n    {\n        this.colorsService = colorsService;\n    }\n\n    [McpServerTool, Description(ColorsInfo.GetAllColorsToolDescription)]\n    public async Task<string> GetAllColors()\n    {\n        var colors = await colorsService.GetColors();\n        return JsonSerializer.Serialize(colors, ColorsContext.Default.ListColors);\n    }\n\n    [McpServerTool, Description(ColorsInfo.GetColorsByFamilyToolDescription)]    \n    public async Task<string> GetColorByFamily(\n                    [Description(ColorsInfo.GetColorsByFamilyParamFamilyDescription)] string family)\n    {\n        var colors = await colorsService.GetColorsByFamily(family);\n        return JsonSerializer.Serialize(colors, ColorsContext.Default.ListColors);\n    }\n\n\n    [McpServerTool, Description(ColorsInfo.GetColorToolDescription)]\n    public async Task<string> GetColor([Description(ColorsInfo.GetColorParamNameDescription)] string name)\n    {\n        var colors = await colorsService.GetColors(name);\n        return JsonSerializer.Serialize(colors, ColorsContext.Default.Colors);\n    }\n}\n\n"})}),"\n",(0,t.jsx)(o.p,{children:"The annotations on the functions are crucial, as they are used by the program logic to identify and link to the appropriate tools."}),"\n",(0,t.jsx)(o.p,{children:"The description fields within these annotations must be clear and precise, as they are used by the AI logic to determine whether a particular tool should be called to fulfill a given request."}),"\n",(0,t.jsx)(o.h2,{id:"deployment",children:"Deployment"}),"\n",(0,t.jsx)(o.p,{children:"The ColorsMCP-http project includes a Docker file to build a Docker image / container.  This makes it simple to deploy e.g. to Azure App Service."}),"\n",(0,t.jsx)(o.p,{children:"The Command to build the container is in the repo ReadMe file."}),"\n",(0,t.jsx)(o.h2,{id:"test",children:"Test"}),"\n",(0,t.jsx)(o.p,{children:"A client test utility was included in the solution.  This examines the server to see what Tools it exposes, and then it invoked the Tool to get the Red information."}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{src:n(7646).A+"",width:"1707",height:"1392"})}),"\n",(0,t.jsx)(o.p,{children:"Alternatively use the MCP Inspector utility - instructions to run this are in the ReadMe file."}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{src:n(69).A+"",width:"1707",height:"1161"})})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>l});var s=n(6540);const t={},r=s.createContext(t);function i(e){const o=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);